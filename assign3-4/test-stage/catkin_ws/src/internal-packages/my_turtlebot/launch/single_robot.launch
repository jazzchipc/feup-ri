<!-- 
  Turtlebot navigation simulation:
  - stage
  - map_server
  - move_base
  - static map
  - amcl
  - rviz view
 -->
<launch>

  <arg name="base"       default="$(optenv TURTLEBOT_BASE kobuki)"/>  <!-- create, rhoomba -->
  <arg name="stacks"     default="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  default="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <!-- Name of the map to use (without path nor extension) and initial position -->
  <arg name="map_file"       default=" $(find my_turtlebot)/maps/maze.yaml"/> <!-- robopark_plan -->
  <arg name="world_file"     default=" $(find my_turtlebot)/maps/stage/maze_one_robot.world"/>
  <arg name="initial_pose_x" default="2.0"/>
  <arg name="initial_pose_y" default="2.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <arg name="fully_observable_map" default="false"/>

  <!-- Explanation here: http://wiki.ros.org/Clock#Using_Simulation_Time_from_the_.2BAC8-clock_Topic -->
  <param name="/use_sim_time" value="true"/>
  <!--  ******************** Stage ********************  -->
  <!-- 
        Publishes transforms:
          /base_link -> /base_laser
          /base_footprint -> /base_link (identity)
          /odom -> base_footprint
        Publishes topics:
          /odom : odometry data from the simulated odometry
          /base_scan : laser data from the simulated laser
          /base_pose_ground_truth : the ground truth pose
        Parameters:
          base_watchdog_timeout : time (s) after receiving the last command on cmd_vel before stopping the robot
        Args:
          -g : run in headless mode.
  --> 
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="odom" to="odom"/>
    <remap from="base_pose_ground_truth" to="base_pose_ground_truth"/>
    <remap from="base_scan" to="scan"/>
  </node>

  <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
    <arg name="base" value="$(arg base)" />
    <arg name="stacks" value="$(arg stacks)" />
    <arg name="3d_sensor" value="$(arg 3d_sensor)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>

  <!--  ****** Maps *****  -->
  <!-- The map information on the "/map" topic depends on the "fully_observable_map" argument. If it is
  set to true, then the robot has information about all the map. Else, it has only the information provided by the sensors. -->

  <!-- If and Unless: http://wiki.ros.org/roslaunch/XML#if_and_unless_attributes -->
  
  <group if="$(arg fully_observable_map)">
    <!-- Map Server publishes map information from a file AND NOT FROM THE ROBOT. -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
      <param name="frame_id" value="map"/>
    </node>

    <!-- AMCL publishes a transform that allows to known the position of the robot in the map.
    Source: https://answers.ros.org/question/12750/problem-in-transform-from-map-to-base/
    -->
    <include file="$(find turtlebot_navigation)/launch/includes/amcl/amcl.launch.xml">
      <arg name="scan_topic" value="scan"/>
      <arg name="use_map_topic" value="true"/>
      <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
      <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
      <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
    </include>
      
  </group>
  
  <group unless="$(arg fully_observable_map)">
    <!-- GMapping makes the ROBOT ITSELF build the map. -->
    <include file="$(find my_turtlebot)/launch/gmapping_demo.launch"/>
  </group>

  <!-- RVIZ -->
  
  <!-- <node type="rviz" name="rviz" pkg="rviz" args="-d $(find my_turtlebot)/rviz/my_config_1.rviz" /> -->
  
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find turtlebot_rviz_launchers)/rviz/navigation.rviz"/>
</launch>
